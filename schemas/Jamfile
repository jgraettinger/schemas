#

import "schema_builder" : build-schema ;
import project ;
import sequence ;

local rule is-cpp ( n )
{ return [ MATCH (.*cpp)$ : $(n) ] ; }
local rule is-py ( n )
{ return [ MATCH (.*py)$ : $(n) ] ; }

lib boost_python-py25 ;

# TestDB: schema compiler invocation; declaration of python & c++ targets
local testdb_targets = [ build-schema [ project.current ] : "testdb.schema" ] ;
local testdb_cpp_targets = [ sequence.filter is-cpp : $(testdb_targets) ] ;
local testdb_py_targets  = [ sequence.filter is-py  : $(testdb_targets) ] ;

python-extension _testdb :
    $(testdb_cpp_targets)
    boost_python-py25
;

install testdb_install :
    _testdb
    $(testdb_py_targets)
    :
    <location>$(INSTALL)/schemas/testdb
    ;

# Datastore: schema compiler invocation; declaration of python & c++ targets
local datastore_targets = [ build-schema [ project.current ] : "datastore.schema" ] ;
local datastore_cpp_targets = [ sequence.filter is-cpp : $(datastore_targets) ] ;
local datastore_py_targets  = [ sequence.filter is-py  : $(datastore_targets) ] ;

python-extension _datastore :
    $(datastore_cpp_targets)
    boost_python-py25
;

install datastore_install :
    _datastore
    $(datastore_py_targets)
    :
    <location>$(INSTALL)/schemas/datastore
    ;

