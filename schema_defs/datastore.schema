_database_name = 'datastore'

# Partner
partner = entity(
    id =                           hashed_unique(int),
    sell_to_adnexus =              bool,
    right_media_id =               optional(int),
    adnexus_id =                   optional(int),
    can_buy_on_realtime_admeld =   bool,
    can_buy_on_realtime_pubmatic = bool,
    can_buy_on_realtime_google =   bool,
    can_buy_on_realtime_adnexus =  bool,
    can_buy_on_realtime_adbrite =  bool,
    can_buy_on_right_media =       bool,
)

# Client
client = entity(
    id =               hashed_unique(int),
    partner_id =       partner.id,
    landing_page_url = str,
    name =             str,
)

# Pixel
pixel = entity(
    id =                   hashed_unique(int),
    is_partner_wide =      bool,
    partner_id =           partner.id,
    client_id =            optional(client.id),
    integration_code =     optional(str),
    pixel_type =           interned,
    target_option_value =  int,
).index(
    'partner_code',
    ordered,
    ['is_partner_wide', 'partner_id', 'integration_code'],
).index(
    'client_code',
    ordered,
    ['is_partner_wide', 'client_id', 'integration_code'],
)

# Piggyback Pixel
piggyback_pixel = entity(
    id =                hashed_unique(int),
    pixel_id =          optional(pixel.id),
    format =            interned,
    hidden =            bool,
    is_primary =        bool,
    redirect_var =      optional(str),
    right_media_id =    optional(int),
    right_media_type =  optional(interned),
    url =               str,
)

# Creative
creative = entity(
    id =                        hashed_unique(int),
    client_id =                 client.id,
    asset_url =                 optional(str),
    clickthrough_url =          optional(str),
    flash_click_tag =           optional(interned),
    flash_loop =                bool,
    priority =                  int,
    width =                     int,
    height =                    int,
    im_tag_template =           str,
    track_clicks =              bool,
    tracking_pixel =            optional(interned),
    url_type =                  interned,
    integration_code =          str,
)

# Budget
budget = entity(
    id =                          hashed_unique(int),
    in_budget =                   bool,
    impression_cap =              optional(long),
    impression_count =            optional(long),
    nano_dollar_cap =             optional(long),
    nano_dollar_count =           optional(long),
    interval =                    optional(int),
    interval_impression_cap =     optional(long),
    interval_impression_count =   optional(long),
    interval_nano_dollar_cap =    optional(long),
    interval_nano_dollar_count =  optional(long),
)

# Learning Budget
learning_budget = entity(
    id =                          hashed_unique(int),
    in_budget =                   bool,
    nano_dollar_cap =             optional(long),
    nano_dollar_count =           optional(long),
    interval =                    optional(int),
    interval_nano_dollar_cap =    optional(long),
    interval_nano_dollar_count =  optional(long),
)

# Insertion order
insertion_order = entity(
    id =         ordered_unique(int),
    client_id =  client.id,
    budget_id =  budget.id,
    integration_code = optional(str),
)

# Target Option Names
target_option = entity(
    id   = ordered_unique(int),
    name = ordered_unique(str),
    # Did this come down from the dashboard, or did we build it?
    from_dashboard = bool,
)

# Target Option Values
target_option_value = entity(
    id   = ordered_unique(int),
    target_option_id = target_option.id,
    name = str,
).index(
    'target_option_and_name',
    ordered_unique,
    ['target_option_id', 'name'],
)

# Campaign
campaign = entity(
    id =                             hashed_unique(int),
    insertion_order_id =             insertion_order.id,
    budget_id =                      budget.id,
    learning_budget_id =             learning_budget.id,
    learn_mode =                     bool,
    priority =                       int,
    campaign_type =                  optional(interned),
    integration_code =               optional(str),
    click_conversion_rate =          float,
    optimized_click_threshold =      int,
    optimized_conversion_threshold = int,
    optimized_impression_threshold = int,
)

# Campaign target options
campaign_target_option = relation(
    campaign_id      = campaign.id,
    target_option_id = target_option.id,
    target_option_value_id = target_option_value.id,
    exclude          = bool,
)

# Frequency Cap
frequency_cap = entity(
    id =                ordered_unique(int),
    campaign_id =       hashed_unique(campaign.id),
    period =            optional(int),
    total_per_period =  optional(int),
    type =              interned,
)

# Client Goal
client_goal = entity(
    id =             ordered_unique(int),
    campaign_id =    campaign.id,
    amount =         optional(float),
    click_amount =   optional(float),
    click_window =   optional(int),
    deleted =        bool,
    goal_type =      interned,
    view_amount =    optional(float),
    view_window =    optional(int),
).index(
    'campaign_goal_type',
    hashed_unique,
    ['campaign_id', 'goal_type']
)

# Client Goal => Pixel
client_goal_pixel = relation(
    client_goal_id = hashed_unique(client_goal.id),
    pixel_id = pixel.id,
)

# Payment Item
payment_item = entity(
    id =                                  hashed_unique(int),
    campaign_id =                         campaign.id,
    item_type =                           interned,
    amount =                              optional(float),
    click_amount =                        optional(float),
    click_window =                        optional(int),
    media_cost_markup =                   optional(interned),
    media_cost_markup_applies_to_total =  bool,
    view_amount =                         optional(float),
    view_window =                         optional(int),
)

# Payment Item => Pixel
payment_item_pixel = relation(
    payment_item_id = hashed_unique(payment_item.id),
    pixel_id = pixel.id,
)

# Bidding Strategy
bidding_strategy = entity(
    id =                  ordered_unique(int),
    campaign_id =         hashed(campaign.id),
    amount =              optional(float),
    click_amount =        optional(float),
    max_amount =          optional(float),
    price_reduce =        bool,
    pricing_type =        optional(interned),
    stay_within_goals =   bool,
    strategy_type =       interned,
    view_amount =         optional(float),
)

# Line Item
line_item = entity(
    id =                                       hashed_unique(int),
    
    campaign_id =                              campaign.id,
    creative_id =                              creative.id,
    client_id =                                client.id,
    partner_id =                               partner.id,
    
    active =                                   bool,
    adnexus_active =                           bool,
    adecn_active =                             bool,
    adbrite_active =                           bool,
    admeld_active =                            bool,
    pubmatic_active =                          bool,
    google_active =                            bool,
    
    cost_adjustment =                          float,
    learn_mode =                               bool,
    percent_media_additional_cost_1 =          optional(float),
    percent_media_additional_cost_2 =          optional(float),
    percent_profit_margin_additional_cost_1 =  optional(float),
    percent_profit_margin_additional_cost_2 =  optional(float),
    
).index(
    'campaign_and_creative',
    ordered,
    ['campaign_id', 'creative_id'],
)

# Inventory Source
inventory_source = entity(
    id =                      ordered_unique(int),
    partner_id =              partner.id,
    piggyback_pixel_id =      optional(piggyback_pixel.id),
    integration_code =        optional(str),
    managed =                 bool,
    reserve_cpm =             optional(float),
    name =                    ordered(str),
)

# Inventory Group
inventory_group = entity(
    id =                      ordered_unique(int),
    inventory_source_id =     inventory_source.id,
    integration_code =        optional(str),
)

# Inventory Unit
inventory_unit = entity(
    id =                      ordered_unique(int),
    inventory_group_id =      inventory_group.id,
    integration_code =        optional(interned),
)

# Inventory Size
inventory_size = entity(
    id =                     hashed_unique(int),
    partner_id =             partner.id,
    inventory_unit_id =      inventory_unit.id,
    inventory_source_id =    inventory_source.id,
    
    unit_integration_code =  optional(str),
    group_integration_code = optional(str),
    
    adnexus_id =             optional(int),
    width =                  int,
    height =                 int,
#    iframe_tag =             str,
    linked_partner_reserve = float,
#    script_tag =             str,
).index(
    'source',
    ordered,
    ['inventory_source_id', 'width', 'height'],
)

# Ties (unit/group integration codes, partner, w/h) => Inventory Size
inventory_size_code = relation(
    inventory_size_id =  inventory_size.id,
    is_group =           bool,
    integration_code =   str,
    partner_id =         partner.id,
    width =              int,
    height =             int,
).index(
    'code',
    ordered,
    ['is_group', 'integration_code', 'partner_id', 'width', 'height'],
)

# Publisher Line Item
publisher_line_item = entity(
    id =                     hashed_unique(int),
    partner_id =             partner.id,
    inventory_source_id =    inventory_source.id,
    inventory_source_name =  ordered(str),
    default_trust_clients =  bool,
    integration_code =       optional(str),
    pricing_amount =         float,
    pricing_type =           interned,
    reserve_cpm =            optional(float),
).index(
    'parter_integration',
    ordered,
    ['partner_id', 'integration_code'],
)

# Publisher line item default creatives
publisher_line_item_default_creative = relation(
    publisher_line_item_id  = publisher_line_item.id,
    width =                   int,
    height =                  int,
    creative_id =             creative.id,
).index(
    'publisher_and_size',
    ordered_unique,
    ['publisher_line_item_id', 'width', 'height'],
)

# Publisher line item target options
publisher_line_item_target_option = relation(
    publisher_line_item_id = publisher_line_item.id,
    target_option_id =  target_option.id,
    target_option_value_id = target_option_value.id,
    exclude = bool,
)

# Universal Site
universal_site = entity(
    id =                   ordered_unique(int),
    is_targetable =        bool,
    target_option_value =  optional(int),
)

universal_site_lookup = entity(
    id =                ordered_unique(int),
    universal_site_id = ordered(universal_site.id),
    code =              optional(int),
    lookup_type =       interned,
    url =               optional(str),
).index(
    'type_and_code',
    ordered,
    ['lookup_type', 'code'],
)

